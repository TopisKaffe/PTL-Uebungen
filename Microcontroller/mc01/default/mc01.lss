
mc01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006b4  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000009cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000009ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b5  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000006c  00000000  00000000  00000abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000105  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000085  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015c  00000000  00000000  00000cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00000e31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	04 c1       	rjmp	.+520    	; 0x23a <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
#include <avr/io.h>
#include <stdlib.h>



int main(void){
  34:	2f 92       	push	r2
  36:	3f 92       	push	r3
  38:	4f 92       	push	r4
  3a:	5f 92       	push	r5
  3c:	6f 92       	push	r6
  3e:	7f 92       	push	r7
  40:	8f 92       	push	r8
  42:	9f 92       	push	r9
  44:	af 92       	push	r10
  46:	bf 92       	push	r11
  48:	cf 92       	push	r12
  4a:	df 92       	push	r13
  4c:	ef 92       	push	r14
  4e:	ff 92       	push	r15
  50:	0f 93       	push	r16
  52:	1f 93       	push	r17
	DDRB |= 1;
  54:	b8 9a       	sbi	0x17, 0	; 23
	PORTB |= 1;
  56:	c0 9a       	sbi	0x18, 0	; 24
	uint64_t i=0 ,count= 5000 ,k=0;
  58:	00 e0       	ldi	r16, 0x00	; 0
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	b0 e0       	ldi	r27, 0x00	; 0
  5e:	a0 e0       	ldi	r26, 0x00	; 0
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	e0 e0       	ldi	r30, 0x00	; 0
  64:	70 e0       	ldi	r23, 0x00	; 0
  66:	cc 24       	eor	r12, r12
  68:	60 e0       	ldi	r22, 0x00	; 0
  6a:	50 e0       	ldi	r21, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	22 24       	eor	r2, r2
  76:	ff 24       	eor	r15, r15

	while(1){	
		if((i+k)>count){
  78:	88 24       	eor	r8, r8
  7a:	83 94       	inc	r8
  7c:	70 2e       	mov	r7, r16
  7e:	76 0e       	add	r7, r22
  80:	bb 24       	eor	r11, r11
  82:	b3 94       	inc	r11
  84:	70 16       	cp	r7, r16
  86:	08 f0       	brcs	.+2      	; 0x8a <__SREG__+0x4b>
  88:	bb 24       	eor	r11, r11
  8a:	d1 2e       	mov	r13, r17
  8c:	d5 0e       	add	r13, r21
  8e:	ee 24       	eor	r14, r14
  90:	e3 94       	inc	r14
  92:	d1 16       	cp	r13, r17
  94:	08 f0       	brcs	.+2      	; 0x98 <__SREG__+0x59>
  96:	ee 24       	eor	r14, r14
  98:	bd 0c       	add	r11, r13
  9a:	aa 24       	eor	r10, r10
  9c:	a3 94       	inc	r10
  9e:	bd 14       	cp	r11, r13
  a0:	08 f0       	brcs	.+2      	; 0xa4 <__SREG__+0x65>
  a2:	aa 24       	eor	r10, r10
  a4:	ea 28       	or	r14, r10
  a6:	ab 2e       	mov	r10, r27
  a8:	a4 0e       	add	r10, r20
  aa:	dd 24       	eor	r13, r13
  ac:	d3 94       	inc	r13
  ae:	ab 16       	cp	r10, r27
  b0:	08 f0       	brcs	.+2      	; 0xb4 <__SREG__+0x75>
  b2:	dd 24       	eor	r13, r13
  b4:	6e 2c       	mov	r6, r14
  b6:	6a 0c       	add	r6, r10
  b8:	ee 24       	eor	r14, r14
  ba:	e3 94       	inc	r14
  bc:	6a 14       	cp	r6, r10
  be:	08 f0       	brcs	.+2      	; 0xc2 <__SREG__+0x83>
  c0:	ee 24       	eor	r14, r14
  c2:	de 28       	or	r13, r14
  c4:	aa 2e       	mov	r10, r26
  c6:	a3 0e       	add	r10, r19
  c8:	ee 24       	eor	r14, r14
  ca:	e3 94       	inc	r14
  cc:	aa 16       	cp	r10, r26
  ce:	08 f0       	brcs	.+2      	; 0xd2 <__SREG__+0x93>
  d0:	ee 24       	eor	r14, r14
  d2:	5d 2c       	mov	r5, r13
  d4:	5a 0c       	add	r5, r10
  d6:	dd 24       	eor	r13, r13
  d8:	d3 94       	inc	r13
  da:	5a 14       	cp	r5, r10
  dc:	08 f0       	brcs	.+2      	; 0xe0 <__stack+0x1>
  de:	dd 24       	eor	r13, r13
  e0:	ed 28       	or	r14, r13
  e2:	af 2e       	mov	r10, r31
  e4:	a2 0e       	add	r10, r18
  e6:	dd 24       	eor	r13, r13
  e8:	d3 94       	inc	r13
  ea:	af 16       	cp	r10, r31
  ec:	08 f0       	brcs	.+2      	; 0xf0 <__stack+0x11>
  ee:	dd 24       	eor	r13, r13
  f0:	4e 2c       	mov	r4, r14
  f2:	4a 0c       	add	r4, r10
  f4:	ee 24       	eor	r14, r14
  f6:	e3 94       	inc	r14
  f8:	4a 14       	cp	r4, r10
  fa:	08 f0       	brcs	.+2      	; 0xfe <__stack+0x1f>
  fc:	ee 24       	eor	r14, r14
  fe:	de 28       	or	r13, r14
 100:	ae 2e       	mov	r10, r30
 102:	a9 0e       	add	r10, r25
 104:	ee 24       	eor	r14, r14
 106:	e3 94       	inc	r14
 108:	ae 16       	cp	r10, r30
 10a:	08 f0       	brcs	.+2      	; 0x10e <__stack+0x2f>
 10c:	ee 24       	eor	r14, r14
 10e:	da 0c       	add	r13, r10
 110:	99 24       	eor	r9, r9
 112:	93 94       	inc	r9
 114:	da 14       	cp	r13, r10
 116:	08 f0       	brcs	.+2      	; 0x11a <__stack+0x3b>
 118:	99 24       	eor	r9, r9
 11a:	e9 28       	or	r14, r9
 11c:	97 2e       	mov	r9, r23
 11e:	92 0c       	add	r9, r2
 120:	33 24       	eor	r3, r3
 122:	33 94       	inc	r3
 124:	97 16       	cp	r9, r23
 126:	08 f0       	brcs	.+2      	; 0x12a <__stack+0x4b>
 128:	33 24       	eor	r3, r3
 12a:	e9 0c       	add	r14, r9
 12c:	aa 24       	eor	r10, r10
 12e:	a3 94       	inc	r10
 130:	e9 14       	cp	r14, r9
 132:	08 f0       	brcs	.+2      	; 0x136 <__stack+0x57>
 134:	aa 24       	eor	r10, r10
 136:	a3 28       	or	r10, r3
 138:	9c 2c       	mov	r9, r12
 13a:	9f 0c       	add	r9, r15
 13c:	a9 0c       	add	r10, r9
 13e:	91 f4       	brne	.+36     	; 0x164 <__stack+0x85>
 140:	ee 20       	and	r14, r14
 142:	81 f4       	brne	.+32     	; 0x164 <__stack+0x85>
 144:	dd 20       	and	r13, r13
 146:	71 f4       	brne	.+28     	; 0x164 <__stack+0x85>
 148:	44 20       	and	r4, r4
 14a:	61 f4       	brne	.+24     	; 0x164 <__stack+0x85>
 14c:	55 20       	and	r5, r5
 14e:	51 f4       	brne	.+20     	; 0x164 <__stack+0x85>
 150:	66 20       	and	r6, r6
 152:	41 f4       	brne	.+16     	; 0x164 <__stack+0x85>
 154:	8b 2d       	mov	r24, r11
 156:	84 31       	cpi	r24, 0x14	; 20
 158:	28 f4       	brcc	.+10     	; 0x164 <__stack+0x85>
 15a:	83 31       	cpi	r24, 0x13	; 19
 15c:	d1 f5       	brne	.+116    	; 0x1d2 <__stack+0xf3>
 15e:	87 2d       	mov	r24, r7
 160:	89 38       	cpi	r24, 0x89	; 137
 162:	b8 f1       	brcs	.+110    	; 0x1d2 <__stack+0xf3>
			PORTB ^= 1;
 164:	88 b3       	in	r24, 0x18	; 24
 166:	88 25       	eor	r24, r8
 168:	88 bb       	out	0x18, r24	; 24
			i = 0;
            k+=5;
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	f8 2e       	mov	r15, r24
 16e:	f0 0e       	add	r15, r16
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	f0 16       	cp	r15, r16
 174:	08 f0       	brcs	.+2      	; 0x178 <__stack+0x99>
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	61 0f       	add	r22, r17
 17a:	51 e0       	ldi	r21, 0x01	; 1
 17c:	61 17       	cp	r22, r17
 17e:	08 f0       	brcs	.+2      	; 0x182 <__stack+0xa3>
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	5b 0f       	add	r21, r27
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	5b 17       	cp	r21, r27
 188:	08 f0       	brcs	.+2      	; 0x18c <__stack+0xad>
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	4a 0f       	add	r20, r26
 18e:	31 e0       	ldi	r19, 0x01	; 1
 190:	4a 17       	cp	r20, r26
 192:	08 f0       	brcs	.+2      	; 0x196 <__stack+0xb7>
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	3f 0f       	add	r19, r31
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	3f 17       	cp	r19, r31
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <__stack+0xc1>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	2e 0f       	add	r18, r30
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	2e 17       	cp	r18, r30
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <__stack+0xcb>
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	97 0f       	add	r25, r23
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	97 17       	cp	r25, r23
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <__stack+0xd5>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0f 2d       	mov	r16, r15
 1b6:	16 2f       	mov	r17, r22
 1b8:	da 01       	movw	r26, r20
 1ba:	f9 01       	movw	r30, r18
 1bc:	79 2f       	mov	r23, r25
 1be:	c8 0e       	add	r12, r24
	uint64_t i=0 ,count= 5000 ,k=0;

	while(1){	
		if((i+k)>count){
			PORTB ^= 1;
			i = 0;
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	22 24       	eor	r2, r2
 1ce:	ff 24       	eor	r15, r15
 1d0:	55 cf       	rjmp	.-342    	; 0x7c <__SREG__+0x3d>
            k+=5;
		}else{
			i++;
 1d2:	56 2e       	mov	r5, r22
 1d4:	53 94       	inc	r5
 1d6:	66 24       	eor	r6, r6
 1d8:	63 94       	inc	r6
 1da:	56 16       	cp	r5, r22
 1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__stack+0x101>
 1de:	66 24       	eor	r6, r6
 1e0:	65 0e       	add	r6, r21
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	65 16       	cp	r6, r21
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <__stack+0x10b>
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	76 2e       	mov	r7, r22
 1ec:	74 0e       	add	r7, r20
 1ee:	51 e0       	ldi	r21, 0x01	; 1
 1f0:	74 16       	cp	r7, r20
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <__stack+0x117>
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	95 2e       	mov	r9, r21
 1f8:	93 0e       	add	r9, r19
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	93 16       	cp	r9, r19
 1fe:	08 f0       	brcs	.+2      	; 0x202 <__stack+0x123>
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	a4 2e       	mov	r10, r20
 204:	a2 0e       	add	r10, r18
 206:	31 e0       	ldi	r19, 0x01	; 1
 208:	a2 16       	cp	r10, r18
 20a:	08 f0       	brcs	.+2      	; 0x20e <__stack+0x12f>
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b3 2e       	mov	r11, r19
 210:	b9 0e       	add	r11, r25
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	b9 16       	cp	r11, r25
 216:	08 f0       	brcs	.+2      	; 0x21a <__stack+0x13b>
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	d2 2e       	mov	r13, r18
 21c:	d2 0c       	add	r13, r2
 21e:	ee 24       	eor	r14, r14
 220:	e3 94       	inc	r14
 222:	d2 14       	cp	r13, r2
 224:	08 f0       	brcs	.+2      	; 0x228 <__stack+0x149>
 226:	ee 24       	eor	r14, r14
 228:	65 2d       	mov	r22, r5
 22a:	56 2d       	mov	r21, r6
 22c:	47 2d       	mov	r20, r7
 22e:	39 2d       	mov	r19, r9
 230:	2a 2d       	mov	r18, r10
 232:	9b 2d       	mov	r25, r11
 234:	2d 2c       	mov	r2, r13
 236:	fe 0c       	add	r15, r14
 238:	21 cf       	rjmp	.-446    	; 0x7c <__SREG__+0x3d>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
